
Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note: The solution set must not contain duplicate quadruplets.

For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]

Solution: 问题分解为子问题

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
         //首先进行排序
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList();
        int len = nums.length;
        if (nums == null || len < 4)
			return res;
        if(4*nums[0]>target||4*nums[len-1]<target) return res;
        
        int z;
        for(int i=0;i<len-3;i++){
            z = nums[i];
            //去重
            if(i>0&&nums[i]==nums[i-1]) continue;
            //去掉边界不可能情况
            if((z+3*nums[len-1])<target) continue;
            if(4*z>target) break;
            
            //连续四个数一样的边界情况
            if(4*z==target){
                if((i+3)<len&&nums[i+3]==z)
                    res.add(Arrays.asList(z,z,z,z));
                break;
            }
            //求解三个数求和的子问题
            threeSumForFourSum(nums,target-z,res,i+1,len-1,z);
        }
        return res;
    }
    
    void threeSumForFourSum(int[] nums,int target,List<List<Integer>> res,int low,int high,int four){
        //if(low>high) return;
        
        if(3*nums[low]>target||3*nums[high]<target) return;
        
        int z;
        for(int i=low;i<high-1;i++){
            z = nums[i];
            //去重
            if(i>low&&nums[i]==nums[i-1]) continue;
            //去掉边界不可能情况
            if((z+2*nums[high])<target) continue;
            if(3*z>target) break;
            
            //连续四个数一样的边界情况
            if(3*z==target){
                if((i+2)<=high&&nums[i+2]==z)
                    res.add(Arrays.asList(four,z,z,z));
                break;
            }
            //求解二个数求和的子问题
            twoSumForThreeSum(nums,target-z,res,i+1,high,four,z);
        }
    }
    
     void twoSumForThreeSum(int[] nums,int target,List<List<Integer>> res,int low,int high,int four,int three){
        //if(low>=high) return;
        
        if(2*nums[low]>target||2*nums[high]<target) return;
        
        int lo = low,hi = high,sum;
        //双指针前后求和
        while(lo<hi){
            sum = nums[lo]+nums[hi];
            if(sum==target){
                res.add(Arrays.asList(four,three,nums[lo],nums[hi]));
                while(lo<hi&&nums[lo]==nums[lo+1]) lo++;
                while(lo<hi&&nums[hi]==nums[hi-1]) hi--;
                lo++;
                hi--;
            }else if(sum<target)
                lo++;
            else
                hi--;
        }
     }
}