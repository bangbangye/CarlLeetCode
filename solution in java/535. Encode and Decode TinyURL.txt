Note: This is a companion problem to the System Design problem: Design TinyURL.
TinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk.

Design the encode and decode methods for the TinyURL service. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.


Solution:

public class Codec {

    Map<String,String > encode = new HashMap();
    Map<String,String > decode = new HashMap();

    static String transStr = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    static String preStr = "http://tinyurl.com/";
    // Encodes a URL to a shortened URL.
    public String encode(String longUrl) {
        if(encode.containsKey(longUrl)) return preStr+encode.get(longUrl);
        String res = "";
        do{
            StringBuffer sb = new StringBuffer();
            for(int i=0;i<6;i++){
                int r = (int)(Math.random()*transStr.length());
                sb.append(transStr.charAt(r));
            }
            res = sb.toString();
        }while(decode.containsKey(res));
        encode.put(longUrl,res);
        decode.put(res,longUrl);
        return res;
    }

    // Decodes a shortened URL to its original URL.
    public String decode(String shortUrl) {
        return decode.get(shortUrl.replace(preStr,""));
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.decode(codec.encode(url));