Design a data structure that supports all following operations in average O(1) time.

Note: Duplicate elements are allowed.
insert(val): Inserts an item val to the collection.
remove(val): Removes an item val from the collection if present.
getRandom: Returns a random element from current collection of elements. The probability of each element being returned is linearly related to the number of same value the collection contains.
Example:

// Init an empty collection.
RandomizedCollection collection = new RandomizedCollection();

// Inserts 1 to the collection. Returns true as the collection did not contain 1.
collection.insert(1);

// Inserts another 1 to the collection. Returns false as the collection contained 1. Collection now contains [1,1].
collection.insert(1);

// Inserts 2 to the collection, returns true. Collection now contains [1,1,2].
collection.insert(2);

// getRandom should return 1 with the probability 2/3, and returns 2 with the probability 1/3.
collection.getRandom();

// Removes 1 from the collection, returns true. Collection now contains [1,2].
collection.remove(1);

// getRandom should return 1 and 2 both equally likely.
collection.getRandom();


Best Solution: 设计数据结构

public class RandomizedCollection {
    Map<Integer,LinkedHashSet<Integer>> map;
    List<Integer> col;
    Random r ;

    /** Initialize your data structure here. */
    public RandomizedCollection() {
        map = new HashMap<>();
        col = new ArrayList<>();
        r = new Random();
    }
    
    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */
    public boolean insert(int val) {
        boolean flag = map.containsKey(val);
        if(!flag){
            map.put(val,new LinkedHashSet<>());
        }
        map.get(val).add(col.size());
        col.add(val);
        return !flag;   
    }
    
    /** Removes a value from the collection. Returns true if the collection contained the specified element. */
    public boolean remove(int val) {
        boolean flag = map.containsKey(val);
        if(!flag){
            return false;
        }
        //找到要移除的坐标set和坐标
        LinkedHashSet<Integer> toReplaceSet = map.get(val);
        int toReplaceIdx = toReplaceSet.iterator().next();
        //用最后以为与要移除的替换位置
        int replace = col.get(col.size()-1);
        LinkedHashSet<Integer> replaceSet = map.get(replace);
        col.set(toReplaceIdx,replace);
        //从原坐标set删除原位置
        toReplaceSet.remove(toReplaceIdx);
        //判断原坐标是否就是左后一个
        if(toReplaceIdx!=(col.size()-1)){
            replaceSet.remove(col.size()-1);
            replaceSet.add(toReplaceIdx);
        }
        //从记录数组中删除
        col.remove(col.size()-1);
        //判断是否还有val元素
        if(toReplaceSet.isEmpty()){
            map.remove(val);
        }
        return true;
    }
    
    /** Get a random element from the collection. */
    public int getRandom() {
        return col.get(r.nextInt(col.size()));
    }
}

/**
 * Your RandomizedCollection object will be instantiated and called as such:
 * RandomizedCollection obj = new RandomizedCollection();
 * boolean param_1 = obj.insert(val);
 * boolean param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */