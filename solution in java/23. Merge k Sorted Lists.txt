Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.


分治排序
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists==null||lists.length==0) return null;
        return partion(lists,0,lists.length-1);
    }
    
    public ListNode partion(ListNode[] lists,int s,int e){
        if(s==e) return lists[s];
        if(s<e){
            int q = s+(e-s)/2;
            ListNode l1 = partion(lists,s,q);
            ListNode l2 = partion(lists,q+1,e);
            return mergeTwoLists(l1,l2);
        }
        return null;
    }
    

    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        
        if(l1==null) return l2;
        if(l2==null) return l1;
        
        if(l1.val<l2.val){
            l1.next = mergeTwoLists(l1.next,l2);
            return l1;
        }else{
            l2.next = mergeTwoLists(l2.next,l1);
            return l2;
        }
        
    }

}

优先队列
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists==null||lists.length==0) return null;
        
        PriorityQueue<ListNode> q = new PriorityQueue<ListNode>(lists.length,new Comparator<ListNode>(){
            @Override
            public int compare(ListNode o1, ListNode o2) {
                if(o1.val<o2.val)
                    return -1;
                else if(o1.val>o2.val)
                    return 1;
                return 0;
            }
        });
        
        for(ListNode l:lists){
            if(l!=null) q.add(l);
        }
        ListNode tail = new ListNode(0);
        ListNode start = tail;
        
        while(!q.isEmpty()){
            tail.next = q.poll();
            tail = tail.next;
            if(tail.next!=null) q.add(tail.next);
        }
        return start.next;
    }
}
