Given a collection of distinct numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]


Solution: 回溯算法

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList();
        backtrack(res,new ArrayList(),nums);
        return res;
    }
    
    //回溯算法，每次回溯结束后删除当前值
    void backtrack(List<List<Integer>> res,List<Integer> temp,int[] nums){
        //如果temp已经有所有数字，结束回溯
        if(temp.size()==nums.length)
            //res.add(temp);temp会变为空，要new ArrayList
            res.add(new ArrayList<>(temp));

        else{
            //nums从0开始填充temp，已经填充过的忽略
            for(int i=0;i<nums.length;i++){
                if(temp.contains(nums[i])) continue;
                temp.add(nums[i]);
                backtrack(res,temp,nums);
                temp.remove(temp.size()-1);
            }
        }
    }
}