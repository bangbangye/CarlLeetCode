Implement a trie with insert, search, and startsWith methods.

Note:
You may assume that all inputs are consist of lowercase letters a-z.

Solution:

class Trie {
    Trie[] children;
    String item;
    /** Initialize your data structure here. */
    public Trie() {
        children = new Trie[26];
        item = "";
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        if(word==null||"".equals(word)) return;
        char[] cs = word.toCharArray();
        Trie node = this;
        for(char c : cs){
            if(node.children[c-'a']==null){
                node.children[c-'a'] = new Trie();
            }
            node = node.children[c-'a'];
        }
        node.item = word;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        char[] cs = word.toCharArray();
        Trie node = this;
        for(char c : cs){
            if(node.children[c-'a']==null){
                return false;
            }
            node = node.children[c-'a'];
        }
        if(node.item.equals(word))
            return true;
        else
            return false;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        char[] cs = prefix.toCharArray();
        Trie node = this;
        for(char c : cs){
            if(node.children[c-'a']==null){
                return false;
            }
            node = node.children[c-'a'];
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */