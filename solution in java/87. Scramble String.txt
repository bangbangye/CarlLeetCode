Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.

Solution: DP解法
class Solution {
    /**
		 * Let F(i, j, k) = whether the substring S1[i..i + k - 1] is a scramble of S2[j..j + k - 1] or not
		 * Since each of these substrings is a potential node in the tree, we need to check for all possible cuts.
		 * Let q be the length of a cut (hence, q < k), then we are in the following situation:
		 * 
		 * S1 [   x1    |         x2         ]
		 *    i         i + q                i + k - 1
		 * 
		 * here we have two possibilities:
		 *      
		 * S2 [   y1    |         y2         ]
		 *    j         j + q                j + k - 1
		 *    
		 * or 
		 * 
		 * S2 [       y1        |     y2     ]
		 *    j                 j + k - q    j + k - 1
		 * 
		 * which in terms of F means:
		 * 
		 * F(i, j, k) = for some 1 <= q < k we have:
		 *  (F(i, j, q) AND F(i + q, j + q, k - q)) OR (F(i, j + k - q, q) AND F(i + q, j, k - q))
		 *  
		 * Base case is k = 1, where we simply need to check for S1[i] and S2[j] to be equal 
		 * */
    public boolean isScramble(String s1, String s2) {
        int len = s1.length();
        if(len!=s2.length()) return false;
        if(s1.equals(s2)) return true;
        //DP
        boolean[][][] dp = new boolean[len][len][len+1];
        
        for(int k=1;k<=len;k++){
            for(int i=0;(i+k)<=len;i++){
                for(int j=0;(j+k)<=len;j++){
                    if(k==1){
                        dp[i][j][k] = s1.charAt(i)==s2.charAt(j);
                        continue;
                    }
                    for(int q=1;q<k&&!dp[i][j][k];q++){
                        dp[i][j][k] = (dp[i][j][q]&&dp[i+q][j+q][k-q])||(dp[i][j+k-q][q]&&dp[i+q][j][k-q]);
                    }
                }
            }
        }
        return dp[0][0][len];
    }
}

Solution : 递归解法

    public boolean isScramble(String s1, String s2) {
        //if(len!=s2.length()) return false;
        if(s1.equals(s2)) return true;
        
        //如果两String包含字母不一致，返回false；
        int[] letters = new int[26];
        for(int i=0;i<s1.length();i++){
            letters[s1.charAt(i)-'a']++;
            letters[s2.charAt(i)-'a']--;
        }
        for(int i=0;i<26;i++){
            if(letters[i]!=0) return false;
        }
        //迭代求解
        for(int i=1;i<s1.length();i++){
            if(isScramble(s1.substring(0,i),s2.substring(0,i))&&isScramble(s1.substring(i),s2.substring(i))) 
                return true;
            if(isScramble(s1.substring(0,i),s2.substring(s2.length()-i))&&isScramble(s1.substring(i),s2.substring(0,s2.length()-i))) 
                return true;
        }
        return false;
    }