Given N axis-aligned rectangles where N > 0, determine if they all together form an exact cover of a rectangular region.

Each rectangle is represented as a bottom-left point and a top-right point. For example, a unit square is represented as [1,1,2,2]. (coordinate of bottom-left point is (1, 1) and top-right point is (2, 2)).


Example 1:

rectangles = [
  [1,1,3,3],
  [3,1,4,2],
  [3,2,4,4],
  [1,3,2,4],
  [2,3,3,4]
]

Return true. All 5 rectangles together form an exact cover of a rectangular region.

Example 2:

rectangles = [
  [1,1,2,3],
  [1,3,2,4],
  [3,1,4,2],
  [3,2,4,4]
]

Return false. Because there is a gap between the two rectangular regions.

Example 3:

rectangles = [
  [1,1,3,3],
  [3,1,4,2],
  [1,3,2,4],
  [3,2,4,4]
]

Return false. Because there is a gap in the top center.

Example 4:

rectangles = [
  [1,1,3,3],
  [3,1,4,2],
  [1,3,2,4],
  [2,2,4,4]
]

Return false. Because two of the rectangles overlap with each other.

Solution: 完美组成矩形只存在4个顶点及T型接口和十字型接口

class Solution {
    //http://blog.csdn.net/qq508618087/article/details/52483625
    public boolean isRectangleCover(int[][] rectangles) {
        Map<String,Integer> map = new HashMap();
        
        for(int[] rec:rectangles){
            //储存四个点的坐标
            for(int i=0;i<4;i++){
                String point = rec[i/2*2]+","+rec[i%2*2+1];
                //如果同一个坐标点的上下左右出现了两次，则false；
                //上下左右用掩码1111表示；
                if(map.containsKey(point)&&((map.get(point)&(1<<i))!=0)) return false;
                //通过验证，则保存点坐标及更新掩码
                map.put(point,map.getOrDefault(point,0)|(1<<i));
            }
        }
        //除了四个顶点以外，同一个点坐标只能出现2或4次
        int corPoint = 0;
        for(Integer val : map.values()){
            //判断是否1个的顶点点是否超过4个
            if((val&(val-1))==0&&corPoint++>4) return false;
            //判断是否能够组成T字接口或者十字接口
            if(!((val&(val-1))==0)&&!(val==3||val==12||val==5||val==10||val==15)) return false;
        }
        return true;
    }
}