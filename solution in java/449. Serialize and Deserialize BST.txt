Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure.

The encoded string should be as compact as possible.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.

Solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root==null) return "";
        //先序遍历 DFS 入栈顺序中出右左进
        StringBuffer sb = new StringBuffer();
        Stack<TreeNode> s = new Stack();
        s.push(root);
        TreeNode cur;
        while(!s.isEmpty()){
            cur = s.pop();
            sb.append(cur.val+",");
            if(cur.right!=null) s.push(cur.right);
            if(cur.left!=null) s.push(cur.left);
        }
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        //data是先序遍历形成的，第一元素是根，小于根的是左，大于根的是右
        if(data==null||data.length()==0) return null;
        String[] strs = data.split(",");
        Queue<Integer> queue = new LinkedList();
        for(String str:strs)
            queue.offer(Integer.parseInt(str));
        return buildTree(queue);
    }
    TreeNode buildTree(Queue<Integer> queue){
        if(queue.isEmpty()) return null;
        TreeNode root = new TreeNode(queue.poll());
        //小于根的组成左子树，大于根的是右
        Queue<Integer> smallQueue = new LinkedList();
        while(!queue.isEmpty()&&queue.peek()<root.val){
            smallQueue.offer(queue.poll());
        }
        root.left = buildTree(smallQueue);
        root.right = buildTree(queue);
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));