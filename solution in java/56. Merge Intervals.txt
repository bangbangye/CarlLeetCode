Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].


Solution: sort

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        if(intervals.size()<=1) return intervals;
        //sort
        intervals.sort((o1,o2)->Integer.compare(o1.start,o2.start));
        
        List<Interval> res = new ArrayList();
        int start = intervals.get(0).start;
        int end = intervals.get(0).end;
        for(Interval in:intervals){
            if(in.start<=end){
                end = Math.max(end,in.end);
            }else{
                res.add(new Interval(start,end));
                start = in.start;
                end = in.end;
            }
        }
        //不要遗漏最后一个组
        res.add(new Interval(start,end));
        return res;
    }
}

Best Solution:

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
     public List<Interval> merge(List<Interval> intervals) {
        // sort start&end
        int n = intervals.size();
        int[] starts = new int[n];
        int[] ends = new int[n];
        for(int i=0;i<n;i++){
            starts[i] = intervals.get(i).start;
            ends[i] = intervals.get(i).end;
        }
        Arrays.sort(starts);
        Arrays.sort(ends);
        // loop through
        List<Interval> res = new ArrayList<Interval>();
        //双指针分别遍历starts，ends数组
         for(int i=0,j=0;i<n;i++){
             if(i==n-1||starts[i+1]>ends[i]){
                 res.add(new Interval(starts[j],ends[i]));
                 j = i+1;
             }
         }
        return res;
    }
}