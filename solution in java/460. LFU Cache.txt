Design and implement a data structure for Least Frequently Used (LFU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least frequently used item before inserting a new item. For the purpose of this problem, when there is a tie (i.e., two or more keys that have the same frequency), the least recently used key would be evicted.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LFUCache cache = new LFUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.get(3);       // returns 3.
cache.put(4, 4);    // evicts key 1.
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4

Solution:

public class LFUCache {
    private final int MAX_CAPACITY;
    private Node head = null;
    //保存key-value
    private HashMap<Integer,Integer> values;
    //保存访问频率一样的key，两个map数量一致，key一致
    private HashMap<Integer,Node> nodeHash;

    class Node{
        int count; //访问数量
        Node pre;
        Node next;
        //此访问数量下的keys,使用LinkedHashSet保证同意频率下访问的先后顺序
        LinkedHashSet<Integer> keys;

        public Node(int count) {
            this.count = count;
            pre = next = null;
            keys = new LinkedHashSet<Integer>();
        }
    }

    public LFUCache(int capacity) {
        this.MAX_CAPACITY = capacity;
        values = new HashMap<Integer,Integer>();
        nodeHash = new HashMap<Integer,Node>();
    }

    public int get(int key) {
        if(values.containsKey(key)){
            //数量+1
            increaseCount(key);
            return values.get(key);
        }
        return -1;
    }

    public void put(int key, int value) {
        if(MAX_CAPACITY==0) return;
        if(values.containsKey(key)){ //已存在
            values.put(key,value);
        }else {
            if(MAX_CAPACITY>values.size()){//缓存未超限
                values.put(key,value);
            }else {
                //缓存超限则清理
                removeOldest();
                values.put(key,value);
            }
            //key不存在的话，要将新key添加到nodeList最前面
            add2Head(key);
        }
        //任何情况都要增加1访问频率
        increaseCount(key);
    }

    //新增元素至头部
    private void add2Head(int key) {
        if(head==null){
            Node n = new Node(0);
            n.keys.add(key);
            head = n;
        }else if(head.count>0){
            Node n = new Node(0);
            n.keys.add(key);
            n.next = head;
            head.pre = n;
            head = n;
        }else{
            head.keys.add(key);
        }
        nodeHash.put(key,head);
    }

    //将最不符合LFU的记录去掉(最少访问中的最旧记录)
    private void removeOldest() {
        if(head==null) return;
        int oldest = head.keys.iterator().next(); //最少记录key
        head.keys.remove(oldest);
        if(head.keys.size()==0) remove(head);
        values.remove(oldest);
        nodeHash.remove(oldest);
    }

    //key的访问频率+1
    private void increaseCount(int key) {
        Node node = nodeHash.get(key);
        node.keys.remove(key);
        //将key保存到count+1的node中
        if(node.next==null){//下一个node不存在
            node.next = new Node(node.count+1);
            node.next.pre = node;
            node.next.keys.add(key);
        }else if (node.next.count==node.count+1){//下一个node存在且count=count+1
            node.next.keys.add(key);
        }else{//下一个node存在且count!=count+1
            Node temp = new Node(node.count+1);
            temp.keys.add(key);
            temp.pre = node;
            temp.next = node.next;
            node.next.pre = temp;
            node.next = temp;
        }
        nodeHash.put(key,node.next);
        if(node.keys.size()==0) remove(node);
    }

    private void remove(Node node) {
        //如果是head
        if(node.pre==null){
            head = node.next;
        }else{
            node.pre.next = node.next;
        }
        if(node.next!=null)
            node.next.pre = node.pre;
    }


}