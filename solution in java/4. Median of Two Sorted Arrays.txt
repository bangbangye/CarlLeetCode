There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5

Solution: //二分法查找
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        
        if(m>n)
            return (findMedianSortedArrays(nums2,nums1));
        int imin = 0;
        int imax = m;
        int half = (m+n+1)/2;
        int i=0;
        int j = 0;
        
        while(imin<=imax){
            i = (imin+imax)/2;
            j = half-i;
            //如果2中左最大比1中右最小大，1往后截取
            if(i<m&&nums2[j-1]>nums1[i])
                imin = i+1;
            //反之1往前截取
            else if(i>0&&nums1[i-1]>nums2[j])
                imax = i-1;
            //边界条件，i满足条件或者i==0,j==0
            else{
                int max_left = 0;
                if(i==0) max_left = nums2[j-1];
                else if(j==0) max_left = nums1[i-1];
                else max_left = Math.max(nums1[i-1],nums2[j-1]);
                //奇数个
                if((m+n)%2==1) return max_left;
                //偶数个
                int min_right = 0;
                if(i==m) min_right = nums2[j];
                else if(j==n) min_right = nums1[i];
                else{
                    min_right = Math.min(nums1[i],nums2[j]);
                }
                return (max_left+min_right)/2.0;
            }
        }
        return -1;
    }
}

Solution : 递归二分查找
class Solution {
    
    public double findkthMin(int[] a,int m,int begin1,int[] b,int n,int begin2,int k){
        if(m>n) return findkthMin(b,n,begin2,a,m,begin1,k);
        
        if(m==0) return b[begin2+k-1];
        
        if(k==1) return Math.min(a[begin1],b[begin2]);
        
        int partA = Math.min(k/2,m);
        int partB = k-partA;
        if(a[begin1+partA-1]==b[begin2+partB-1])
            return a[begin1+partA-1];
        else if(a[begin1+partA-1]<b[begin2+partB-1])
            return findkthMin(a,m-partA,begin1+partA,b,n,begin2,k-partA);
        else
            return findkthMin(a,m,begin1,b,n-partB,begin2+partB,k-partB);
        
    }
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        
        if((m+n)%2==1)
            return findkthMin(nums1,m,0,nums2,n,0,(m+n+1)/2);
        else 
		return (findkthMin(nums1, m, 0, nums2, n, 0, (m+n) / 2)
				+ findkthMin(nums1, m, 0, nums2, n, 0, (m+n) / 2 + 1)) / 2.0;
	
    }
}
