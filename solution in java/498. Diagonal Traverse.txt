Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.

Example:
Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output:  [1,2,4,7,5,3,6,8,9]
Explanation:

Note:
The total number of elements of the given matrix will not exceed 10,000.


Solution:
class Solution {
    public int[] findDiagonalOrder(int[][] matrix) {
        if (matrix == null || matrix.length == 0) return new int[0];
        int len = matrix.length*matrix[0].length;
        int row = matrix.length-1;
        int col = matrix[0].length-1;
        int m = 0;
        int n = 0;
        int count = 0;
        int[] arr = new int[len];
        //方向向量
        int dir = 1;
        while(count<len){
            arr[count++] = matrix[m][n];
            //前进一步
            m -= dir;
            n += dir;
            if(n>col){
                //超过右边界，变向
                m+=2;
                n--;
                dir = -1;
            }else if(m>row){
                //超过下边界，变向
                n+=2;
                m--;
                dir = 1;
            }else if(m<0){
                //如果超过上边界 ,变向回来
                m++;
                dir = -1;
            }else if(n<0){
                //超过左边界，变向
                n++;
                dir = 1;
            }
        }
        return arr;
    }
}