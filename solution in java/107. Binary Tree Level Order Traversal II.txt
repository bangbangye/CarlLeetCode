Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

Solution: BFS宽度最优搜索

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> wrapList = new LinkedList();
        Queue<TreeNode> queue = new LinkedList();
        
        if(root==null) return wrapList;
        
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> level = new LinkedList();
            for(int i=0;i<size;i++){
                if(queue.peek().left!=null) queue.offer(queue.peek().left);
                if(queue.peek().right!=null) queue.offer(queue.peek().right);
                level.add(queue.poll().val);
            }
            wrapList.add(0,level);
        }
        return wrapList;
    }
}


Solution: DFS宽度最优搜索
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> wrapList = new LinkedList();
        
        if(root==null) return wrapList;
        
        levelMarker(root,wrapList,0);
        return wrapList;
    }
    
    public void levelMarker(TreeNode root,List<List<Integer>> wrapList,int level){
        if(root==null) return;
        
        if(wrapList.size()<=level){
            wrapList.add(0,new LinkedList<Integer>());
        }
        levelMarker(root.left,wrapList,level+1);
        levelMarker(root.right,wrapList,level+1);
        wrapList.get(wrapList.size()-1-level).add(root.val);
        
    }
}

