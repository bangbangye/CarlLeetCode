Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]

Solution: 排序后双指针前后移动判断求和class Solution {

class Solution {
     public List<List<Integer>> threeSum(int[] nums) {
        //首先进行排序
        Arrays.sort(nums);
        List<List<Integer>> list = new ArrayList();
        for (int i = 0; i < nums.length - 2; i++) {
            //nums[i]!=nums[i-1]为了去重复，如果相等，i次循环中的满足结果在i-1中已出现
            if (i == 0 || (i > 0 && nums[i] != nums[i - 1])) {
                //对于每一个nums[i] ，查询后面的部分中有没有满足sum的
                int lo = i + 1, hi = nums.length - 1, sum = 0 - nums[i];
                while (lo < hi) {
                    //双指针移动，如果刚好满足
                    if ((nums[lo] + nums[hi]) == sum) {
                        list.add(Arrays.asList(nums[i], nums[lo], nums[hi]));
                        while (lo < hi && nums[lo] == nums[lo + 1]) lo++;
                        while (lo < hi && nums[hi] == nums[hi - 1]) hi--;
                        lo++;
                        hi--;
                    } else if ((nums[lo] + nums[hi]) < sum) {
                        lo++;
                    } else {
                        hi--;
                    }
                }
            }
        }
        return list;
    }
}