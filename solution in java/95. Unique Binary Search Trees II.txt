Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1...n.

For example,
Given n = 3, your program should return all 5 unique BST's shown below.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

Solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<TreeNode> generateTrees(int n) {
        if(n<1) return new ArrayList();
        return generateTree(1,n);
    }
    
    List<TreeNode> generateTree(int start,int end) {
        List<TreeNode> res = new ArrayList();
        
        if(start>end){
            //关键，不填null，空的子树将无法形成
            res.add(null);
            return res;
        }
        
        for(int i=start;i<=end;i++){
            //选定root后，分别递归计算左右子树们
            List<TreeNode> lefts = generateTree(start,i-1);
            List<TreeNode> rights = generateTree(i+1,end);
            //将左右子树跟root合并
            for(TreeNode left:lefts){
                for(TreeNode right:rights){
                    TreeNode root = new TreeNode(i);
                    root.left = left;
                    root.right = right;
                    res.add(root);
                }
            }
        }
        return res;
    }
}