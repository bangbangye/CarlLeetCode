Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.

Solution: backtrack

class Solution {
    private int[][] dirs = new int[][]{{1,0},{0,1},{-1,0},{0,-1}};
    public boolean exist(char[][] board, String word) {
        int row = board.length;
        int col = board[0].length;
        
        boolean[][] visited = new boolean[row][col];
        //从矩阵任意一点开始回溯判断
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(backtrack(board,word,0,visited,i,j))
                    return true;
            }
        }
        return false;
    }
    
    boolean backtrack(char[][] board, String word,int idx,boolean[][] visited,int i,int j){
        //超出边界，或者已经访问过，退回上一步
        if(!(i>=0&&i<board.length&&j>=0&&j<board[0].length)||visited[i][j])
            return false;
        visited[i][j] = true;
        //只有匹配吻合，才进行下一步
        if(board[i][j]==word.charAt(idx)){
            //完结条件：最后一个字母温和
            if(idx==(word.length()-1)) return true;
            for(int[] dir:dirs){
                if(backtrack(board,word,idx+1,visited,i+dir[0],j+dir[1]))
                    return true;
            }
        }
        //处理回溯结尾
        visited[i][j] = false;
        return false;
    }
}