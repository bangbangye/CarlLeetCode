Given n, how many structurally unique BST's (binary search trees) that store values 1...n?

For example,
Given n = 3, there are a total of 5 unique BST's.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

Solution:

class Solution {
    //数学方法+DP
    //f(i,n) = g(i-1)*g(n-i)
    //f():以i为root的树的个数 g(n):n个节点能组成的树的总个数
    //g(n) = f(0,n)+...+f(n,n)
    public int numTrees(int n) {
        int[] f = new int[n+1];
        int[] g = new int[n+1];
        
        g[0] = 1;
        g[1] = 1;
        for(int i=2;i<=n;i++){
            for(int j=1;j<=i;j++){
                f[j] = g[j-1]*g[i-j];                
                g[i] += f[j];    
            }
        }
        return g[n];
    }
}