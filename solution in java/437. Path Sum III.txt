You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11

Solution: DFS 递归 O(n2) 从root到root之后一共有多少路径
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int pathSum(TreeNode root, int sum) {
        if(root==null) return 0;
        
        return pathChild(root,sum)+pathSum(root.left,sum)+pathSum(root.right,sum);
    }
    
    //包含root节点的路径一共有多少解
    public int pathChild(TreeNode root, int sum) {
        int res = 0;
        if(root==null) return 0;
        
        if(root.val == sum)
            res++;
        res += pathChild(root.left,sum-root.val);
        res += pathChild(root.right,sum-root.val);
        
        return res;
    }
    
    
}

Solution: DFS 递归 O(n) 从当前root到root之前一共有多少路径

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int pathSum(TreeNode root, int sum) {
        if(root==null) return 0;
        Map<Integer,Integer> hisSum = new HashMap();
        hisSum.put(0,1);
        
        return prePath(root,0,sum,hisSum);
    }
    
    //包含root节点以及之前的节点一共多少解
    public int prePath(TreeNode root, int curSum,int target,Map<Integer,Integer> hisSum) {
        int res = 0;
        if(root==null) return 0;
        
        curSum += root.val;
        
        //如果已存在curSum-target，说明存在到当前结点的路径
        res = hisSum.getOrDefault(curSum-target,0);
        //放入当前sum
        hisSum.put(curSum,hisSum.getOrDefault(curSum,0)+1);
        //分别计算左右子节点
        res += prePath(root.left,curSum,target,hisSum)+prePath(root.right,curSum,target,hisSum);
        //当前节点执行完返回上一层时，从历史中去掉当前sum
        hisSum.put(curSum,hisSum.get(curSum)-1);
        
        return res;
    }
    
    
}
