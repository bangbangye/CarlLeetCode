Given an m x n matrix of non-negative integers representing the height of each unit cell in a continent, the "Pacific ocean" touches the left and top edges of the matrix and the "Atlantic ocean" touches the right and bottom edges.

Water can only flow in four directions (up, down, left, or right) from a cell to another one with height equal or lower.

Find the list of grid coordinates where water can flow to both the Pacific and Atlantic ocean.

Note:
The order of returned grid coordinates does not matter.
Both m and n are less than 150.
Example:

Given the following 5x5 matrix:

  Pacific ~   ~   ~   ~   ~ 
       ~  1   2   2   3  (5) *
       ~  3   2   3  (4) (4) *
       ~  2   4  (5)  3   1  *
       ~ (6) (7)  1   4   5  *
       ~ (5)  1   1   2   4  *
          *   *   *   *   * Atlantic

Return:

[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (positions with parentheses in above matrix).

Solution:  DFS

class Solution {
    int[][] dirs = new int[][]{{1,0},{0,1},{-1,0},{0,-1}}; 
    public List<int[]> pacificAtlantic(int[][] matrix) {
        List<int[]> res = new ArrayList();
        int row = matrix.length;
        if(row==0) return res;
        int col = matrix[0].length;
        boolean[][] p = new boolean[row][col];
        boolean[][] a = new boolean[row][col];
        
        //分别从四条边界，dfs逆向填充水可以从低流到高的节点，从低到高可以，那么从高到低也可以
        for(int i=0;i<row;i++){
            dfs(p,i,0,row,col,Integer.MIN_VALUE,matrix);
            dfs(a,i,col-1,row,col,Integer.MIN_VALUE,matrix);
        }
        for(int i=0;i<col;i++){
            dfs(p,0,i,row,col,Integer.MIN_VALUE,matrix);
            dfs(a,row-1,i,row,col,Integer.MIN_VALUE,matrix);
        }
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(p[i][j]&&a[i][j])
                    res.add(new int[]{i,j});
            }
        }
        return res;
    }
    
    void dfs(boolean[][] visited,int i,int j,int row,int col,int preHeight,int[][] matrix){
        if(i<0||j<0||i>=row||j>=col||visited[i][j]||matrix[i][j]<preHeight)
            return ;
        //没超边界，之前没访问过，且matrix>=preHeight说明当前节点可以流向之前节点
        visited[i][j] = true;
        for(int[] dir : dirs){
            //dfs判断周围节点能否流入海洋
            dfs(visited,i+dir[0],j+dir[1],row,col,matrix[i][j],matrix);            
        }
    }
}