Design a simplified version of Twitter where users can post tweets, follow/unfollow another user and is able to see the 10 most recent tweets in the user's news feed. Your design should support the following methods:

postTweet(userId, tweetId): Compose a new tweet.
getNewsFeed(userId): Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.
follow(followerId, followeeId): Follower follows a followee.
unfollow(followerId, followeeId): Follower unfollows a followee.
Example:

Twitter twitter = new Twitter();

// User 1 posts a new tweet (id = 5).
twitter.postTweet(1, 5);

// User 1's news feed should return a list with 1 tweet id -> [5].
twitter.getNewsFeed(1);

// User 1 follows user 2.
twitter.follow(1, 2);

// User 2 posts a new tweet (id = 6).
twitter.postTweet(2, 6);

// User 1's news feed should return a list with 2 tweet ids -> [6, 5].
// Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.
twitter.getNewsFeed(1);

// User 1 unfollows user 2.
twitter.unfollow(1, 2);

// User 1's news feed should return a list with 1 tweet id -> [5],
// since user 1 is no longer following user 2.
twitter.getNewsFeed(1);

Solution: map保存用户，链表保存tweets，优先队列取最近10条。

class Twitter {
    private static int timestamp = 0;
    
    private Map<Integer,User> users;
    /** Initialize your data structure here. */
    public Twitter() {
        users = new HashMap<Integer,User>();
    }
    
    private class Tweet{
        public int id;
        public int time;
        public Tweet next;
        public Tweet(int id){
            this.id = id;
            this.time = timestamp++;
            this.next = null;
        }
    }
    private class User{
        public int id;
        public Set<Integer> followed;
        public Tweet tweet_head;
        
        public User(int id){
            this.id = id;
            followed = new HashSet<Integer>();
            //自己关注自己以便查找所有的tweet
            follow(id);
            this.tweet_head = null;
        }
        
        public void follow(int id){
            followed.add(id);
        }
        public void unfollow(int id){
            followed.remove(id);
        }
        //新建tweet添加到用户的tweet链表中
        public void post(int id){
            Tweet t = new Tweet(id);
            t.next = tweet_head;
            tweet_head = t;
        }
    }
    
    /** Compose a new tweet. */
    public void postTweet(int userId, int tweetId) {
        //用户不存在就新建
        if(!users.containsKey(userId)){
            User u = new User(userId);
            u.post(tweetId);
            users.put(userId,u);
        }else{
            users.get(userId).post(tweetId);
        }
    }
    
    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */
    public List<Integer> getNewsFeed(int userId) {
        List<Integer> res = new LinkedList();
        if(!users.containsKey(userId))   return res;
        
        //follow的用户列表
        Set<Integer> follows = users.get(userId).followed;
        //降序(a,b)->(b.time-a.time)
        Queue<Tweet> queue = new PriorityQueue<Tweet>(users.size(),(a,b)->(b.time-a.time));
        for(int u:follows){
            Tweet t = users.get(u).tweet_head;
            if(t!=null)
                queue.add(t);
        }
        int i=0;
        //取前10条
        while(!queue.isEmpty()&&i<10){
            //每个users的tweet_head是最新一条
            Tweet t = queue.poll();
            res.add(t.id);
            i++;
            //将t.next放入队列，依然取最大值
            if(t.next!=null)
                queue.add(t.next);
        }
        return res;
    }
    
    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */
    public void follow(int followerId, int followeeId) {
        //用户不存在就新建
        if(!users.containsKey(followerId)){
            User u = new User(followerId);
            u.follow(followeeId);
            users.put(followerId,u);
        }else{
            users.get(followerId).follow(followeeId);
        }
        if(!users.containsKey(followeeId)){
            User u = new User(followeeId);
            users.put(followeeId,u);
        }
    }
    
    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */
    public void unfollow(int followerId, int followeeId) {
        if(!users.containsKey(followerId)||followerId==followeeId)
            return;
        
        users.get(followerId).unfollow(followeeId);
    }
}

/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter obj = new Twitter();
 * obj.postTweet(userId,tweetId);
 * List<Integer> param_2 = obj.getNewsFeed(userId);
 * obj.follow(followerId,followeeId);
 * obj.unfollow(followerId,followeeId);
 */