Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

For example, 
Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.


The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!

Solution: Stack,回溯 On space
class Solution {
    public int trap(int[] height) {
        if(height.length<3) return 0;
        Stack<Integer> s = new Stack();
        
        int i=0,max=0,maxBot=0;
        while(i<height.length){
            //比之前s中的都高且已经计算完毕的情况；和没有前一个高的情况
            if(s.isEmpty()||height[i]<=height[s.peek()]){
                s.push(i++);
            }else{
                int low = s.pop();
                //s.isEmpty()排除了s中一开始就上升的情况
                maxBot = s.isEmpty()?0:(Math.min(height[s.peek()],height[i])-height[low])*(i-s.peek()-1);
                max+=maxBot;
            }
        }
        
        return max;
    }
}

Solution: 双指针遍历，O1 space

class Solution {
    public int trap(int[] height) {
        int sum = 0;
        int leftMax = 0;
        int rightMax = 0;
        int left = 0;
        int right = height.length-1;
        
        while(left<=right){
            //右边界比左边界高时,左边出现下降阶梯时肯定能蓄水
            if(height[left]<=height[right]){
                if(height[left]<leftMax){
                    sum+=(leftMax-height[left]);
                }else{
                    leftMax = height[left];
                }
                left++;
            }else{
                if(height[right]<rightMax)
                    sum+=(rightMax-height[right]);
                else
                    rightMax = height[right];
                right--;
            }
        }
        return sum;        
    }
}
