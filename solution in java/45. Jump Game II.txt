Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

For example:
Given array A = [2,3,1,1,4]

The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)

Note:
You can assume that you can always reach the last index.

Solution: Greed

class Solution {
    public int jump(int[] nums) {
        int cur_pos_max = 0;
        int past_max = 0;
        int step = 0;
        for(int i=0;i<nums.length-1;i++){
            //当前位置节点能覆盖的最大范围
            cur_pos_max = Math.max(cur_pos_max,i+nums[i]);
            //如果到达了前一步能跳到的最大位置，进行下一步的跳跃
            if(i==past_max){
                step++;
                past_max = cur_pos_max;
            }
        }
        return step;
    }
}