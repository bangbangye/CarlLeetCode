Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

Solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return buildChildTree(preorder,inorder,0,0,preorder.length-1);
    }
    //DFS分别构建根节点，左树，右树
    TreeNode buildChildTree(int[] preorder, int[] inorder,int preStart,int inStart,int end){
        if(preStart>preorder.length-1||inStart>end) return null;
        TreeNode root = new TreeNode(preorder[preStart]);
        int idx = 0;
        //根节点在中序遍历中的位置，此位置左边为左子树，右边为右子树
        for(int i=inStart;i<=end;i++){
            if(inorder[i]==preorder[preStart]){
                idx = i;
                break;
            }
        }
        root.left = buildChildTree(preorder,inorder,preStart+1,inStart,idx-1);
        root.right = buildChildTree(preorder,inorder,preStart+idx-inStart+1,idx+1,end);
        return root;
    }
}