Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note: 
You may assume k is always valid, 1 ? k ? BST's total elements.

Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?

DFS Solution:
深度最优搜索，中序遍历

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    int count;
    int res;
    public int kthSmallest(TreeNode root, int k) {
        count = k;
        traverse(root);
        return res;
        
    }
    
    public void traverse(TreeNode root){
        if(count<=0) return;
        if(root.left!=null) traverse(root.left);
        count--;
        if(count==0){
            res = root.val;
            return;
        }
        if(root.right!=null) traverse(root.right);
    }
}