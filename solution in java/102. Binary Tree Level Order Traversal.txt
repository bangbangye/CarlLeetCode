Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]


My Solution: //使用层级queue去遍历树

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList();
        if(root ==null) return res;
        
        Queue<Queue<TreeNode>> queue = new LinkedList();
        Queue<TreeNode> q1 = new LinkedList();
        
        q1.offer(root);
        queue.offer(q1);
        while(!queue.isEmpty()){
            List<Integer> list = new ArrayList();
            Queue<TreeNode> qn = queue.poll();
            Queue<TreeNode> qt = new LinkedList();
            while(!qn.isEmpty()){
                TreeNode cur = qn.poll();
                list.add(cur.val);
                if(cur.left!=null) qt.offer(cur.left);
                if(cur.right!=null) qt.offer(cur.right);
            }
            res.add(list);
            if(qt.size()>0)
                queue.offer(qt);
        }
        return res;
    }
}

Solution:

public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList();
        if(root ==null) return res;
        
        Queue<TreeNode> queue = new LinkedList();
        queue.offer(root);
        while(!queue.isEmpty()){
            List<Integer> list = new ArrayList();
            int size = queue.size();  
            int t = 0;
            while(t++<size){
                TreeNode cur = queue.poll();
                list.add(cur.val);
                if(cur.left!=null) queue.offer(cur.left);
                if(cur.right!=null) queue.offer(cur.right);
            }
            res.add(list);
        }
        return res;
    }

