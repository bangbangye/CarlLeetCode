Given an integer array of size n, find all elements that appear more than ? n/3 ? times. The algorithm should run in linear time and in O(1) space.

My Solution:

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        Map<Integer,Integer> map = new HashMap();
        Set<Integer> res = new HashSet();
        int mask = nums.length/3;
        for(Integer num:nums){
            int value = map.getOrDefault(num,0);
            map.put(num,++value);
            if(value>mask) res.add(num);
        }
        return new ArrayList(res);
    }
}

Best Solution:Majority Element问题

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        if (nums == null || nums.length == 0)
		return new ArrayList<Integer>();
        //Majority Element问题---Moore's voting算法 http://www.cnblogs.com/JimmyTY/p/5020871.html
        int candidate1 = nums[0];
        int candidate2 = nums[0];
        int count1 = 0;
        int count2 = 0;
        //开始投票:最多有两个结果，两个候选人。如果当前num不在候选中，同归于尽。如果存在结果，肯定在候选数中
        for(int num:nums){
            if(num==candidate1)
                count1++;
            else if(num==candidate2)
                count2++;
            else if(count1==0){
                count1++;
                candidate1 = num;
            }else if(count2==0){
                count2++;
                candidate2 = num;
            }else{
                count1--;
                count2--;
            }
        }
        //判断候选数是否达标
        count1 = 0;
        count2 = 0;
        for(int num:nums){
            if(num==candidate1)
                count1++;
            else if(num==candidate2)
                count2++;
        }
        List<Integer> result = new ArrayList();
        if (count1 > nums.length / 3)
            result.add(candidate1);
        if (count2 > nums.length / 3)
            result.add(candidate2);
        return result;
    }
}

