Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.

Note:
The length of num is less than 10002 and will be ≥ k.
The given num does not contain any leading zero.
Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.


Solution: greed stack

class Solution {
    public String removeKdigits(String num, int k) {
        //用数组和坐标代替stack
        char[] stack = new char[num.length()];
        int cur = 0;
        
        int digit = num.length()-k;

        //将前一个值比当前值大的数字从栈中删除
        for(int i=0;i<num.length();i++){
            char c = num.charAt(i);
            while(cur>0&&k>0&&stack[cur-1]>c){
                cur--;
                k--;
            }
            stack[cur++] = c;
        }
        
        //找到第一个不是0的位置
        int idx = 0;
        while(idx<digit&&stack[idx]=='0') idx++;
        
        
        //全是0
        if(idx==digit) return "0";
        //排除掉k不等于0的情况，1111，1234等都不会删除值
        return new String(stack,idx,digit-idx);
    }
}