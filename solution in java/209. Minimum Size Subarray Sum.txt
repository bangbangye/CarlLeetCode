Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum ≥ s. If there isn't one, return 0 instead.

For example, given the array [2,3,1,2,4,3] and s = 7,
the subarray [4,3] has the minimal length under the problem constraint.

click to show more practice.

Solution: two pointers

class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        if(nums.length==0) return 0;
        
        
        int sum = 0;
        int min = Integer.MAX_VALUE;
        int fast = 0;
        int slow = 0;
        while(fast<nums.length){
            sum += nums[fast++];
            //前进一步后sum超出，则前进slow节点直至不超出S
            while(sum>=s){
                min = Math.min(min,fast-slow);
                sum -= nums[slow++];
            }
        }
        return min==Integer.MAX_VALUE?0:min;
    }
}